from PyQt5.QtWidgets import QGraphicsView
from PyQt5.QtGui import QPainter, QPixmap
from PyQt5.QtCore import Qt, QRectF, QSize

class TopologyExporter:
    """Handles exporting topology to different formats."""
    
    def __init__(self, scene):
        """Initialize the topology exporter."""
        self.scene = scene
    
    def export_as_png(self, file_path, background_color=None):
        """Export the topology as a PNG image."""
        try:
            # Get bounding rectangle of all items
            rect = self.scene.itemsBoundingRect()
            
            # Add some margin
            margin = 20
            rect.adjust(-margin, -margin, margin, margin)
            
            # Create a pixmap to render to
            pixmap = QPixmap(rect.width(), rect.height())
            
            # Fill with background color if specified, otherwise transparent
            if background_color:
                pixmap.fill(background_color)
            else:
                pixmap.fill(Qt.transparent)
            
            # Create painter
            painter = QPainter(pixmap)
            
            # Enable antialiasing
            painter.setRenderHint(QPainter.Antialiasing)
            
            # Render the scene
            self.scene.render(
                painter, 
                QRectF(0, 0, rect.width(), rect.height()),  # Target rect
                rect  # Source rect
            )
            
            # End painting
            painter.end()
            
            # Save to file
            pixmap.save(file_path, "PNG")
            return True, None
        
        except Exception as e:
            return False, str(e)
    
    def export_as_svg(self, file_path):
        """Export the topology as an SVG image."""
        try:
            from PyQt5.QtSvg import QSvgGenerator
            
            # Get bounding rectangle of all items
            rect = self.scene.itemsBoundingRect()
            
            # Add some margin
            margin = 20
            rect.adjust(-margin, -margin, margin, margin)
            
            # Create SVG generator
            generator = QSvgGenerator()
            generator.setFileName(file_path)
            generator.setSize(QSize(rect.width(), rect.height()))
            generator.setViewBox(QRectF(0, 0, rect.width(), rect.height()))
            generator.setTitle("Network Topology")
            generator.setDescription("Generated by Network Topology Designer")
            
            # Create painter
            painter = QPainter(generator)
            
            # Enable antialiasing
            painter.setRenderHint(QPainter.Antialiasing)
            
            # Render the scene
            self.scene.render(
                painter, 
                QRectF(0, 0, rect.width(), rect.height()),  # Target rect
                rect  # Source rect
            )
            
            # End painting
            painter.end()
            
            return True, None
        
        except Exception as e:
            return False, str(e)